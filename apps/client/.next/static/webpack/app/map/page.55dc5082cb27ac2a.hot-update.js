"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/map/page",{

/***/ "(app-pages-browser)/./services/orderService.ts":
/*!**********************************!*\
  !*** ./services/orderService.ts ***!
  \**********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cancelOrder: function() { return /* binding */ cancelOrder; },\n/* harmony export */   createOrder: function() { return /* binding */ createOrder; },\n/* harmony export */   getDeliveryTracking: function() { return /* binding */ getDeliveryTracking; },\n/* harmony export */   getOrder: function() { return /* binding */ getOrder; },\n/* harmony export */   getOrderStatuses: function() { return /* binding */ getOrderStatuses; },\n/* harmony export */   getOrders: function() { return /* binding */ getOrders; },\n/* harmony export */   getOrdersByStatus: function() { return /* binding */ getOrdersByStatus; },\n/* harmony export */   orderService: function() { return /* binding */ orderService; },\n/* harmony export */   updateOrderStatus: function() { return /* binding */ updateOrderStatus; }\n/* harmony export */ });\n// Mock data for demonstration\nconst mockOrders = [\n    {\n        id: 1,\n        userId: 1,\n        items: [\n            {\n                id: 1,\n                name: \"Margherita Pizza\",\n                description: \"Fresh tomato sauce, mozzarella, and basil\",\n                price: 32000,\n                category: \"Pizza\",\n                image: \"/images/pizza.jpg\",\n                quantity: 1\n            },\n            {\n                id: 2,\n                name: \"Caesar Salad\",\n                description: \"Crispy romaine lettuce with caesar dressing\",\n                price: 12000,\n                category: \"Salad\",\n                image: \"/images/salad.jpg\",\n                quantity: 1\n            }\n        ],\n        totalAmount: 44000,\n        status: \"confirmed\",\n        createdAt: new Date(\"2024-01-15T10:30:00\"),\n        updatedAt: new Date(\"2024-01-15T10:35:00\")\n    },\n    {\n        id: 2,\n        userId: 1,\n        items: [\n            {\n                id: 3,\n                name: \"Chicken Burger\",\n                description: \"Grilled chicken breast with lettuce and tomato\",\n                price: 9000,\n                category: \"Burger\",\n                image: \"/images/burger.jpg\",\n                quantity: 1\n            }\n        ],\n        totalAmount: 9000,\n        status: \"preparing\",\n        createdAt: new Date(\"2024-01-15T11:00:00\"),\n        updatedAt: new Date(\"2024-01-15T11:05:00\")\n    },\n    {\n        id: 3,\n        userId: 1,\n        items: [\n            {\n                id: 4,\n                name: \"Spaghetti Carbonara\",\n                description: \"Classic Italian pasta with eggs, cheese, and pancetta\",\n                price: 22000,\n                category: \"Pasta\",\n                image: \"/images/pasta.jpg\",\n                quantity: 1\n            }\n        ],\n        totalAmount: 22000,\n        status: \"out_for_delivery\",\n        createdAt: new Date(\"2024-01-15T09:15:00\"),\n        updatedAt: new Date(\"2024-01-15T11:45:00\")\n    },\n    {\n        id: 4,\n        userId: 1,\n        items: [\n            {\n                id: 5,\n                name: \"Fish and Chips\",\n                description: \"Beer-battered fish with crispy fries\",\n                price: 16000,\n                category: \"Seafood\",\n                image: \"/images/fish.jpg\",\n                quantity: 1\n            }\n        ],\n        totalAmount: 16000,\n        status: \"delivered\",\n        createdAt: new Date(\"2024-01-14T18:30:00\"),\n        updatedAt: new Date(\"2024-01-14T19:15:00\")\n    }\n];\nconst mockDeliveryTracking = {\n    1: {\n        orderId: 1,\n        status: \"confirmed\",\n        estimatedDeliveryTime: new Date(Date.now() + 45 * 60 * 1000),\n        currentLocation: {\n            lat: 35.228950619029085,\n            lng: 126.8427269951037\n        },\n        destination: {\n            lat: 35.22858702880908,\n            lng: 126.83922370972543\n        },\n        managerInfo: {\n            name: \"Sarah Johnson\",\n            phone: \"+82-10-1234-5678\",\n            department: \"Kitchen Operations\",\n            role: \"Kitchen Manager\"\n        },\n        updates: [\n            {\n                timestamp: new Date(\"2024-01-15T10:30:00\"),\n                status: \"Order received\",\n                location: \"Restaurant Kitchen\"\n            },\n            {\n                timestamp: new Date(\"2024-01-15T10:35:00\"),\n                status: \"Order confirmed\",\n                location: \"Restaurant Kitchen\"\n            }\n        ]\n    },\n    2: {\n        orderId: 2,\n        status: \"preparing\",\n        estimatedDeliveryTime: new Date(Date.now() + 35 * 60 * 1000),\n        currentLocation: {\n            lat: 35.228950619029085,\n            lng: 126.8427269951037\n        },\n        destination: {\n            lat: 35.22858702880908,\n            lng: 126.83922370972543\n        },\n        managerInfo: {\n            name: \"Mike Chen\",\n            phone: \"+82-10-2345-6789\",\n            department: \"Food Preparation\",\n            role: \"Head Chef\"\n        },\n        updates: [\n            {\n                timestamp: new Date(\"2024-01-15T11:00:00\"),\n                status: \"Order received\",\n                location: \"Restaurant Kitchen\"\n            },\n            {\n                timestamp: new Date(\"2024-01-15T11:05:00\"),\n                status: \"Preparing your order\",\n                location: \"Restaurant Kitchen\"\n            }\n        ]\n    },\n    3: {\n        orderId: 3,\n        status: \"out_for_delivery\",\n        estimatedDeliveryTime: new Date(Date.now() + 15 * 60 * 1000),\n        currentLocation: {\n            lat: 35.229,\n            lng: 126.842\n        },\n        destination: {\n            lat: 35.22858702880908,\n            lng: 126.83922370972543\n        },\n        managerInfo: {\n            name: \"Emma Davis\",\n            phone: \"+82-10-3456-7890\",\n            department: \"Delivery Operations\",\n            role: \"Delivery Manager\"\n        },\n        updates: [\n            {\n                timestamp: new Date(\"2024-01-15T09:15:00\"),\n                status: \"Order received\",\n                location: \"Restaurant Kitchen\"\n            },\n            {\n                timestamp: new Date(\"2024-01-15T09:30:00\"),\n                status: \"Order prepared\",\n                location: \"Restaurant Kitchen\"\n            },\n            {\n                timestamp: new Date(\"2024-01-15T11:45:00\"),\n                status: \"Out for delivery\",\n                location: \"En route to customer\"\n            }\n        ]\n    },\n    4: {\n        orderId: 4,\n        status: \"delivered\",\n        estimatedDeliveryTime: new Date(\"2024-01-14T19:15:00\"),\n        currentLocation: {\n            lat: 35.22858702880908,\n            lng: 126.83922370972543\n        },\n        destination: {\n            lat: 35.22858702880908,\n            lng: 126.83922370972543\n        },\n        managerInfo: {\n            name: \"James Wilson\",\n            phone: \"+82-10-4567-8901\",\n            department: \"Customer Service\",\n            role: \"Service Manager\"\n        },\n        updates: [\n            {\n                timestamp: new Date(\"2024-01-14T18:30:00\"),\n                status: \"Order received\",\n                location: \"Restaurant Kitchen\"\n            },\n            {\n                timestamp: new Date(\"2024-01-14T18:45:00\"),\n                status: \"Order prepared\",\n                location: \"Restaurant Kitchen\"\n            },\n            {\n                timestamp: new Date(\"2024-01-14T19:00:00\"),\n                status: \"Out for delivery\",\n                location: \"En route to customer\"\n            },\n            {\n                timestamp: new Date(\"2024-01-14T19:15:00\"),\n                status: \"Delivered successfully\",\n                location: \"Customer location\"\n            }\n        ]\n    }\n};\n// Simulate API delay\nconst delay = (ms)=>new Promise((resolve)=>setTimeout(resolve, ms));\n// Helper function to ensure order has proper structure\nconst normalizeOrder = (order)=>{\n    return {\n        id: order.id || 0,\n        userId: order.userId || 0,\n        items: Array.isArray(order.items) ? order.items.map((item)=>({\n                id: item.id || 0,\n                name: item.name || \"Unknown Item\",\n                description: item.description || \"\",\n                price: typeof item.price === \"number\" ? item.price : 0,\n                category: item.category || \"Unknown\",\n                image: item.image || \"\",\n                quantity: typeof item.quantity === \"number\" ? item.quantity : 1\n            })) : [],\n        totalAmount: typeof order.totalAmount === \"number\" ? order.totalAmount : 0,\n        status: order.status || \"pending\",\n        createdAt: order.createdAt ? new Date(order.createdAt) : new Date(),\n        updatedAt: order.updatedAt ? new Date(order.updatedAt) : new Date()\n    };\n};\nconst orderService = {\n    // Get all orders for a user\n    async getOrders (userId) {\n        await delay(500); // Simulate API call delay\n        try {\n            let filteredOrders = mockOrders;\n            if (userId) {\n                filteredOrders = mockOrders.filter((order)=>order.userId === userId);\n            }\n            // Normalize all orders to ensure proper structure\n            return filteredOrders.map(normalizeOrder);\n        } catch (error) {\n            console.error(\"Error in getOrders:\", error);\n            return [];\n        }\n    },\n    // Get a specific order by ID\n    async getOrder (orderId) {\n        await delay(300);\n        try {\n            const order = mockOrders.find((order)=>order.id === orderId);\n            return order ? normalizeOrder(order) : null;\n        } catch (error) {\n            console.error(\"Error in getOrder:\", error);\n            return null;\n        }\n    },\n    // Get delivery tracking information for an order\n    async getDeliveryTracking (orderId) {\n        await delay(400);\n        try {\n            const tracking = mockDeliveryTracking[orderId];\n            return tracking || null;\n        } catch (error) {\n            console.error(\"Error in getDeliveryTracking:\", error);\n            return null;\n        }\n    },\n    // Create a new order\n    async createOrder (orderData) {\n        await delay(600);\n        try {\n            const newOrder = normalizeOrder({\n                ...orderData,\n                id: mockOrders.length + 1,\n                createdAt: new Date(),\n                updatedAt: new Date()\n            });\n            mockOrders.push(newOrder);\n            // Create initial delivery tracking\n            mockDeliveryTracking[newOrder.id] = {\n                orderId: newOrder.id,\n                status: \"confirmed\",\n                estimatedDeliveryTime: new Date(Date.now() + 45 * 60 * 1000),\n                currentLocation: {\n                    lat: 35.228950619029085,\n                    lng: 126.8427269951037\n                },\n                destination: {\n                    lat: 35.22858702880908,\n                    lng: 126.83922370972543\n                },\n                managerInfo: {\n                    name: \"New Order Manager\",\n                    phone: \"+82-10-9999-0000\",\n                    department: \"Order Processing\",\n                    role: \"Order Manager\"\n                },\n                updates: [\n                    {\n                        timestamp: new Date(),\n                        status: \"Order received\",\n                        location: \"Restaurant Kitchen\"\n                    }\n                ]\n            };\n            return newOrder;\n        } catch (error) {\n            console.error(\"Error in createOrder:\", error);\n            throw new Error(\"Failed to create order\");\n        }\n    },\n    // Update order status\n    async updateOrderStatus (orderId, status) {\n        await delay(300);\n        try {\n            const orderIndex = mockOrders.findIndex((order)=>order.id === orderId);\n            if (orderIndex === -1) return null;\n            mockOrders[orderIndex].status = status;\n            mockOrders[orderIndex].updatedAt = new Date();\n            // Update delivery tracking\n            if (mockDeliveryTracking[orderId]) {\n                mockDeliveryTracking[orderId].status = status;\n                mockDeliveryTracking[orderId].updates.push({\n                    timestamp: new Date(),\n                    status: \"Status updated to \".concat(status),\n                    location: status === \"delivered\" ? \"Customer location\" : \"In progress\"\n                });\n            }\n            return normalizeOrder(mockOrders[orderIndex]);\n        } catch (error) {\n            console.error(\"Error in updateOrderStatus:\", error);\n            return null;\n        }\n    },\n    // Cancel an order\n    async cancelOrder (orderId) {\n        await delay(400);\n        try {\n            const orderIndex = mockOrders.findIndex((order)=>order.id === orderId);\n            if (orderIndex === -1) return false;\n            if (mockOrders[orderIndex].status === \"delivered\") {\n                return false; // Cannot cancel delivered orders\n            }\n            mockOrders[orderIndex].status = \"cancelled\";\n            mockOrders[orderIndex].updatedAt = new Date();\n            // Update delivery tracking\n            if (mockDeliveryTracking[orderId]) {\n                mockDeliveryTracking[orderId].status = \"cancelled\";\n                mockDeliveryTracking[orderId].updates.push({\n                    timestamp: new Date(),\n                    status: \"Order cancelled\",\n                    location: \"Restaurant\"\n                });\n            }\n            return true;\n        } catch (error) {\n            console.error(\"Error in cancelOrder:\", error);\n            return false;\n        }\n    },\n    // Get order status options\n    getOrderStatuses () {\n        return [\n            \"pending\",\n            \"confirmed\",\n            \"preparing\",\n            \"ready_for_pickup\",\n            \"out_for_delivery\",\n            \"delivered\",\n            \"cancelled\"\n        ];\n    },\n    // Search orders by status\n    async getOrdersByStatus (status, userId) {\n        await delay(300);\n        try {\n            let filteredOrders = mockOrders.filter((order)=>order.status === status);\n            if (userId) {\n                filteredOrders = filteredOrders.filter((order)=>order.userId === userId);\n            }\n            return filteredOrders.map(normalizeOrder);\n        } catch (error) {\n            console.error(\"Error in getOrdersByStatus:\", error);\n            return [];\n        }\n    }\n};\n// Export individual functions for named imports\nconst { getOrders, getOrder, getDeliveryTracking, createOrder, updateOrderStatus, cancelOrder, getOrderStatuses, getOrdersByStatus } = orderService;\n// Default export\n/* harmony default export */ __webpack_exports__[\"default\"] = (orderService);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./services/orderService.ts\n"));

/***/ })

});